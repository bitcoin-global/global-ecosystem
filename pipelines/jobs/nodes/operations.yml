---
meta:
  # Git and GCloud already configured for each operation
  destroy: &destroy
  - (( grab meta.destroy_node ))

  stop: &stop
  - (( grab meta.stop_node ))

  deploy: &deploy
  - (( grab meta.make_node ))
  - (( grab meta.configure_gcloud ))
  - (( grab meta.wait_for_node ))
  - (( join "\n" meta.install_node ))

  update: &update
  - (( grab meta.make_node ))
  - (( grab meta.configure_gcloud ))
  - (( grab meta.wait_for_node ))
  - (( join "\n" meta.update_node ))

  electrum: &electrum
  - (( grab meta.make_node ))
  - (( grab meta.configure_gcloud ))
  - (( grab meta.wait_for_node ))
  - (( join "\n" meta.electrum_op ))

  explorer: &explorer
  - (( grab meta.make_node ))
  - (( grab meta.configure_gcloud ))
  - (( grab meta.wait_for_node ))
  - (( join "\n" meta.explorer_op ))

  miner: &miner
  - (( grab meta.make_node ))
  - (( grab meta.configure_gcloud ))
  - (( grab meta.wait_for_node ))
  - (( join "\n" meta.miner_op ))

  prepare_node: &prepare_node |
    ### Install required packages
    echo "Prepare machine"
    apt-get update
    apt-get install -y \
      gnupg2 ca-certificates git software-properties-common \
      python3.6 sudo nano ruby wget curl pigz \
      autoconf dirmngr gosu dnsutils gpg wget jq npm

    ### Install monitoring
    echo "Install monitoring"
    if [ ! -f /opt/netdata/usr/bin/netdata-claim.sh ]; then
      bash <(curl -Ss https://my-netdata.io/kickstart-static64.sh) --dont-wait --no-updates --stable-channel --disable-telemetry
    fi
    /opt/netdata/usr/bin/netdata-claim.sh -token=${NETDATA_INFRA_TOKEN} -rooms=${NETDATA_INFRA_ROOM} -url=https://app.netdata.cloud || echo "Already claimed"

    ### Add Google Monitoring
    curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
    bash add-monitoring-agent-repo.sh
    apt-get update -y
    apt-get install -y stackdriver-agent
    service stackdriver-agent start

    ### Add Google Logging
    curl -sSO https://dl.google.com/cloudagents/add-logging-agent-repo.sh
    bash add-logging-agent-repo.sh
    apt-get update -y
    apt-get install -y google-fluentd
    apt-get install -y google-fluentd-catch-all-config-structured
    service google-fluentd start

  prepare_bitcoin_install: &prepare_bitcoin_install |
    ### Install required tools
    mkdir -p /binaries
    mkdir -p /bitcoin-global
    rm -rf ./global-ecosystem
    git clone ${GIT_REPO_ECOSYSTEM} ./global-ecosystem
    chmod +x ./global-ecosystem/src/bitglobal/install-node.sh

  make_node: &make_node |
    ### Deploy Node VM on GCP
    global-ecosystem/scripts/add-vm.sh \
      --name="$NODE_NAME" \
      --zone="$NODE_ZONE" \
      --size="$NODE_SIZE" \
      --disk-size="$NODE_DISK_SIZE" \
      --disk-type="$NODE_DISK_TYPE" \
      --tags="bitcoin-global,bitcoin-$NODE_TYPE" \
      --static-ip

    ### Get IP
    VM_REGION=${NODE_ZONE:0:-2}
    export IN_LOCATION=$(echo "$NODE_ZONE" | cut -f1 -d"-")
    ADDRESS_NAME=$NODE_NAME-address
    EXTERNAL_IP=$(gcloud compute addresses describe $ADDRESS_NAME --region $VM_REGION --format json | jq '.address' | tr -d '"')
    
    ## LOGIN TO INFRA PROJECT
    ### Configure Google Cloud authentication
    echo "${GCLOUD_INFRA_CREDENTIALS}" > $GOOGLE_APPLICATION_CREDENTIALS
    gcloud auth activate-service-account \
      $SERVICE_INFRA_ACCOUNT --key-file=${GOOGLE_APPLICATION_CREDENTIALS} --project=$GCP_INFRA_PROJECT

    ### ================== Add Explorer server config
    ### Regional A record
    global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
      --value="${EXTERNAL_IP}" --domain="explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io" \
      --project="${GCP_INFRA_PROJECT}"
    
    ### ================== Add ElectrumX server config
    ### Regional A record
    global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
      --value="${EXTERNAL_IP}" --domain="electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io" \
      --project="${GCP_INFRA_PROJECT}"

    ### ================== Add Miner server config
    ### Regional A record
    global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
      --value="${EXTERNAL_IP}" --domain="pool.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io" \
      --project="${GCP_INFRA_PROJECT}"
    
    if [[ "$IN_LOCATION" == "europe" ]]; then
      ### Parent Electrumx record
      global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
        --value="${EXTERNAL_IP}" --domain="electrumx.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io" \
        --project="${GCP_INFRA_PROJECT}"

      ### Parent Explorer record
      global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
        --value="${EXTERNAL_IP}" --domain="${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io" \
        --project="${GCP_INFRA_PROJECT}"

      ### Parent Miner record
      global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
        --value="${EXTERNAL_IP}" --domain="pool.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io" \
        --project="${GCP_INFRA_PROJECT}"
    fi

  wait_for_node: &wait_for_node |
    ### Loop until ready
    echo "Waiting until VM operational..."
    counter=0
    until gcloud beta compute ssh --zone $NODE_ZONE $NODE_NAME --project $GCP_PROJECT --command 'echo'; do
        counter=$((counter+1))
        if [[ "$counter" -gt 120 ]]; then
            echo "Timed out!"
            exit 1
        fi
        sleep 1
    done
    echo "Success!"

  install_node: &install_node
    - export ENTRYPOINT_COMMAND=${BITCOIN_ENTRYPOINT}
    - export BTC_VERSION=${BITCOIN_VERSION}
    - export BTC_RELEASE=${BITCOIN_RELEASE}
    - export REPO_GIT_LOCATION="bitcoin-global/bitcoin-global.private"
    - gcloud beta compute ssh --zone $NODE_ZONE $NODE_NAME --project $GCP_PROJECT << EOF
    - (( grab meta.configure_shared ))
    - (( grab meta.prepare_node ))
    - (( grab meta.configure_git ))
    - (( grab meta.prepare_bitcoin_install ))
    - (( grab meta.deploy_bitcoin ))
    - exit
    - EOF

  update_node: &update_node
    - export ENTRYPOINT_COMMAND=${BITCOIN_UPDATE_ENTRYPOINT}
    - export BTC_VERSION=${BITCOIN_UPDATE_VERSION}
    - export BTC_RELEASE=${BITCOIN_UPDATE_RELEASE}
    - export REPO_GIT_LOCATION="bitcoin-global/bitcoin-global"
    - gcloud beta compute ssh --zone $NODE_ZONE $NODE_NAME --project $GCP_PROJECT << EOF
    - (( grab meta.configure_shared ))
    - (( grab meta.prepare_node ))
    - (( grab meta.configure_git ))
    - (( grab meta.prepare_bitcoin_install ))
    - (( grab meta.deploy_bitcoin ))
    - exit
    - EOF

  stop_node: &stop_node |
    ### Stop node
    ./global-ecosystem/scripts/remove-vm.sh \
      --name="$NODE_NAME" \
      --zone="$NODE_ZONE"

  destroy_node: &destroy_node |
    ### Destroy node
    ./global-ecosystem/scripts/remove-vm.sh \
      --name="$NODE_NAME" \
      --zone="$NODE_ZONE" \
      --destroy

  deploy_bitcoin: &deploy_bitcoin |
    ### Install Bitcoin
    ./global-ecosystem/src/bitglobal/install-node.sh \
      -v ${BTC_VERSION} -r v${BTC_RELEASE} \
      -g ${REPO_GIT_LOCATION} -c ${BTC_RELEASE} \
      -t /binaries -d ${BITCOIN_DATA_DIR}

    ### Generate configuration
    cat <<CONFIG > /binaries/.bitglobal/bitglob.conf
    listen=1
    maxconnections=256
    upnp=1
    txindex=1

    dbcache=4096
    par=-1
    banscore=10
    checkblocks=64
    checklevel=3

    disablewallet=1
    datadir=${BITCOIN_DATA_DIR}

    rpcworkqueue=512
    rpcallowip=127.0.0.1
    rpcuser=${BITCOIN_RPC_USERNAME}
    rpcpassword=${BITCOIN_RPC_PASSWORD}

    [${BITCOIN_NETWORK_TYPE}]
    port=${BITCOIN_PORT}
    bind=0.0.0.0
    rpcbind=127.0.0.1
    rpcport=18444
    CONFIG

    ### Generate configuration
    ### Deploy certificates for regional server
    BITGLOBD_PATH=/binaries/bin/bitglobd
    if [ ! -f /binaries/bin/bitglobd ]; then
      BITGLOBD_PATH=\$(which bitglobd || echo "/binaries/bin/bitglobd")
    fi
    cat <<SCRIPT > /etc/bitcoin-service.sh
    #!/bin/bash
    \$BITGLOBD_PATH -conf=/binaries/.bitglobal/bitglob.conf $ENTRYPOINT_COMMAND
    SCRIPT
    chmod +x /etc/bitcoin-service.sh

    ### Generate service configuration
    cat <<SRVCCFG > /etc/systemd/system/bitglobd.service
    [Unit]
    Description=Bitcoin Daemon service
    After=network.target

    [Service]
    ExecStart=/etc/bitcoin-service.sh
    User=root
    LimitNOFILE=8192
    TimeoutStopSec=30min
    Restart=on-failure
    RestartSec=3

    [Install]
    WantedBy=multi-user.target
    SRVCCFG

    ### Run service
    systemctl daemon-reload && systemctl enable bitglobd
    systemctl daemon-reload && systemctl restart bitglobd
    echo "Service restarted! Success!"

  electrum_op: &electrum_op
    - gcloud beta compute ssh --zone $NODE_ZONE $NODE_NAME --project $GCP_PROJECT << EOF
    - (( grab meta.configure_shared ))
    - (( grab meta.configure_git ))
    - (( grab meta.deploy_electrum ))
    - exit
    - EOF

  explorer_op: &explorer_op
    - gcloud beta compute ssh --zone $NODE_ZONE $NODE_NAME --project $GCP_PROJECT << EOF
    - (( grab meta.configure_shared ))
    - (( grab meta.configure_git ))
    - (( grab meta.deploy_explorer ))
    - exit
    - EOF

  miner_op: &miner_op
    - gcloud beta compute ssh --zone $NODE_ZONE $NODE_NAME --project $GCP_PROJECT << EOF
    - (( grab meta.configure_shared ))
    - (( grab meta.configure_git ))
    - (( grab meta.deploy_miner ))
    - exit
    - EOF

  deploy_electrum: &deploy_electrum |
    ### Install Electrum
    rm -rf ~/.electrumx-installer/
    wget https://raw.githubusercontent.com/bauerj/electrumx-installer/master/bootstrap.sh -O - | \
      bash -s - \
      --leveldb \
      --update-python \
      --electrumx-git-url https://github.com/bitcoin-global/global-electrumx.git \
      --electrumx-git-branch altcoin
    
    ### Generate SSL
    touch ~/.rnd
    cd /etc/
    mkdir -p electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io
    cd electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io

    openssl genrsa -out server.key 2048
    openssl req -new -key server.key -out server.csr -subj "/C=XX/ST=XX/O=Bitcoin Global/OU=ElectrumX/CN=bitcoin-global.io"
    openssl x509 -req -days 1825 -in server.csr -signkey server.key -out server.crt

    ### Generate ElectrumX configuration
    cat <<SRVCCFG > /etc/electrumx.conf
    DB_DIRECTORY=/db
    DAEMON_URL=http://${BITCOIN_RPC_USERNAME}:${BITCOIN_RPC_PASSWORD}@127.0.0.1:18444/
    COIN=BitcoinGlobal
    NET=${BITCOIN_NETWORK_TYPE}net
    SSL_CERTFILE=/etc/electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io/server.crt
    SSL_KEYFILE=/etc/electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io/server.key
    SERVICES=TCP://:50001,SSL://:50002,TCP://:51001,SSL://:51002,rpc://
    REPORT_SERVICES=TCP://electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io:50001,SSL://electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io:50002,TCP://electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io:51001,SSL://electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io:51002
    ALLOW_ROOT=1
    SRVCCFG

    cat <<SRVCCFG > /etc/systemd/system/electrumx.service
    [Unit]
    Description=Electrumx Service
    After=bitglobd.target

    [Service]
    EnvironmentFile=/etc/electrumx.conf
    ExecStart=/usr/local/bin/electrumx_server
    User=root
    LimitNOFILE=8192
    TimeoutStopSec=30min
    Restart=on-failure
    RestartSec=3

    [Install]
    WantedBy=multi-user.target
    SRVCCFG

    ### Run service
    systemctl daemon-reload && systemctl enable electrumx
    systemctl daemon-reload && systemctl restart electrumx
    echo "Service restarted! Success!"
    
  deploy_explorer: &deploy_explorer |
    ### Install requirements
    apt update -y && apt upgrade -y
    apt install -y git python-software-properties software-properties-common nginx gcc g++ make
    add-apt-repository ppa:certbot/certbot -y
    apt update -y && apt upgrade -y
    apt install -y python-certbot-nginx npm
    python3 -m pip install cffi
    npm install pm2 --global

    ### Deploy certificates for regional server
    if [ ! -f /etc/letsencrypt/live/explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io/cert.pem ]; then
      certbot --nginx --agree-tos -n $CERT_TYPE \
        -d explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io \
        -m admin@bitcoin-global.io
    fi

    ### Create nginx config
    cat <<CERTS > /etc/nginx/sites-available/explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io.conf
    server {
      server_name explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io;
      listen 80;
      #listen [::]:80 ipv6only=on;

      location / {
        return 301 https://explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io$request_uri;
      }
    }

    server {
      server_name explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io;
      listen 443 ssl http2;
      #listen [::]:443 ssl http2 ipv6only=on;

      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
      ssl_prefer_server_ciphers on;
      ssl_session_cache shared:SSL:10m;
      ssl_dhparam /etc/ssl/certs/dhparam.pem;

      ssl_certificate     /etc/letsencrypt/live/explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io/cert.pem;
      ssl_certificate_key /etc/letsencrypt/live/explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io/privkey.pem;

      location / {
        proxy_pass http://localhost:3002;
        proxy_http_version 1.1;
      }
    }
    CERTS

    ### Parent Explorer config
    if [[ "$IN_LOCATION" == "europe" ]]; then
      if [ ! -f /etc/letsencrypt/live/${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io/cert.pem ]; then
        certbot --nginx --agree-tos -n $CERT_TYPE \
          -d ${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io \
          -m admin@bitcoin-global.io
      fi

      cp /etc/nginx/sites-available/explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io.conf \
         /etc/nginx/sites-available/${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io.conf

      sed -i 's/explorer.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net/${BITCOIN_NETWORK_TYPE}net/g' /etc/nginx/sites-available/${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io.conf
    fi

    ### Enable nginx mapping
    ln -s /etc/nginx/sites-available/*.conf /etc/nginx/sites-enabled/  || echo "Already present"
    rm -rf /etc/nginx/sites-enabled/default
    rm -rf /etc/nginx/sites-available/default
    fuser -k 80/tcp
    fuser -k 443/tcp
    service nginx restart

    cd /etc/ssl/certs
    if [ ! -f dhparam.pem ]; then
      openssl dhparam -out dhparam.pem 4096
    fi

    ### Install explorer
    rm -rf /explorer
    git clone https://github.com/bitcoin-global/explorer.git /explorer
    cd /explorer
    npm install || echo "Skipping"

    ### Generate explorer configuration
    mkdir -p ~/.config
    cat <<CONFIG > ~/.config/glob-rpc-explorer.env
    BGEXP_HOST=127.0.0.1
    BGEXP_PORT=3002
    BGEXP_BITGLOBD_HOST=127.0.0.1
    BGEXP_BITGLOBD_PORT=18444
    BGEXP_BITGLOBD_USER=${BITCOIN_RPC_USERNAME}
    BGEXP_BITGLOBD_PASS=${BITCOIN_RPC_PASSWORD}
    BGEXP_ADDRESS_API=electrumx
    BGEXP_ELECTRUMX_SERVERS=ssl://electrumx.${IN_LOCATION}.${BITCOIN_NETWORK_TYPE}net.bitcoin-global.io:50002
    CONFIG

    ### Generate service configuration
    chmod +x /explorer/bin/www
    cat <<SRVCCFG > /etc/systemd/system/explorer.service
    [Unit]
    Description=Bitcoin Explorer service
    After=bitglobd.target

    [Service]
    ExecStart=/explorer/bin/www
    User=root
    LimitNOFILE=8192
    TimeoutStopSec=30min
    Restart=on-failure
    RestartSec=3

    [Install]
    WantedBy=multi-user.target
    SRVCCFG

    ### Run service
    systemctl daemon-reload && systemctl enable explorer
    systemctl daemon-reload && systemctl restart explorer
    echo "Service restarted! Success!"

  deploy_miner: &deploy_miner |
    ### Install required packages
    apt-get install -y python-zope.interface python-twisted python-twisted-web python-argparse

    ### Install explorer
    rm -rf /global-p2pool
    git clone https://github.com/bitcoin-global/global-p2pool.git /global-p2pool
    cd /global-p2pool

    ### Generate script
    cat <<SCRIPT > /etc/miner-service.sh
    #!/bin/bash
    python2 /global-p2pool/run_p2pool.py \
        --net bitglobal \
        $MINER_ADDITIONAL_CMDS \
        --give-author 0 \
        --bitcoind-config-path /binaries/.bitglobal/bitglob.conf \
        --bitcoind-rpc-port $BITCOIN_RPC_PORT \
        --bitcoind-p2p-port $BITCOIN_PORT \
        -a $MINER_ADDRESS
    SCRIPT
    chmod +x /etc/miner-service.sh

    ### Generate service configuration
    cat <<SRVCCFG > /etc/systemd/system/miner.service
    [Unit]
    Description=Bitcoin Miner service
    After=bitglobd.target

    [Service]
    ExecStart=/etc/miner-service.sh
    User=root
    LimitNOFILE=8192
    TimeoutStopSec=30min
    Restart=on-failure
    RestartSec=3

    [Install]
    WantedBy=multi-user.target
    SRVCCFG

    ### Run service
    systemctl daemon-reload && systemctl enable miner
    systemctl daemon-reload && systemctl restart miner
    echo "Service deployed! Success!"
