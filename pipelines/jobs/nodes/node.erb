### Resource overrides
meta_plan:
  runner-config: &runner-config
    image: builder
    timeout: 1h
    privileged: true
    params:
      # Secrets
      SSH_PRIVATE_KEY               : ((ssh.private))
      SSH_PUBLIC_KEY                : ((ssh.public))
      SSH_USER                      : ((ssh.username))
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcloud.json
      TERM                          : xterm-256color
      OPERATION                     : <%= operation.name %>
      CLOUDFLARE_EMAIL              : hi@residence-of-code.com
      CLOUDFLARE_API_TOKEN          : ((cf.api-token))
      
      # Git configs
      GITHUB_TOKEN      : ((git.token))
      GIT_REPO_EXPLORER : (( grab meta.global-explorer-repository ))
      GIT_REPO_ECOSYSTEM: (( grab meta.global-ecosystem-repository ))

  run-<%= operation.id %>:
    - (( grab meta.configure_git ))
    - (( grab meta.configure_gcloud ))
    - (( join "\n" meta.<%= operation.id %> ))

  trigger-<%= operation.id %>:
    - (( grab meta.configure_git ))
    - (( grab meta.push-trigger ))

  update-list:
    - (( grab meta.configure_git ))
    - (( grab meta.configure_gcloud ))
    - (( grab meta.update_nodelist ))

### Configure triggers
resources:
<% net_config.each do |environment| %>
- name: trigger-<%= environment.type %>
  type: git
  icon: github
  source:
    uri     : (( grab meta.global-nodes-repository ))
    username: ((git.username))
    password: ((git.password))
    branch  : triggers
    commit_filter:
      include: ["[trigger] <%= operation.name %> <%= environment.type %>"]
<% end %>

### Pipeline config
jobs:
<% net_config.each do |environment| %>
- name: trigger-<%= environment.type %>
  build_logs_to_retain: 3
  serial: true
  plan:
  - in_parallel:
    - get: builder

  - task: "[<%= operation.name %>] Trigger <%= environment.type %>"
    <<: *runner-config
    config:
      platform: linux
      params: 
        # GCP deployment configuration
        SERVICE_ACCOUNT   : ((gcp.<%= environment.gcp.secrets.email %>))
        GCLOUD_CREDENTIALS: ((gcp.<%= environment.gcp.secrets.gcloud_creds %>))
        GCP_PROJECT       : <%= environment.gcp.project %>

        # GCP infra project
        SERVICE_INFRA_ACCOUNT   : ((gcp.service-account-email))
        GCLOUD_INFRA_CREDENTIALS: ((gcp.service-account))
        GCP_INFRA_PROJECT       : bitcoin-global-infra

        GIT_FOLDER       : trigger
        GIT_BRANCH       : triggers
        GIT_REPO         : (( grab meta.global-nodes-repository ))
        TRIGGER_OPERATION: <%= operation.name %>
        TRIGGER_NET      : <%= environment.type %>
        COMMIT_MESSAGE   : "[trigger] <%= operation.name %> <%= environment.type %>"
      run:
        user: root
        path: bash
        args:
          - -exc
          - (( join "\n" meta_plan.trigger-<%= operation.id %> ))
      outputs:
      - name: trigger
  - put: trigger-<%= environment.type %>
    params: {repository: trigger}

<% environment.gcp.node_locations.each do |node| %>
- name: <%= environment.type %>--<%= node %>
  build_logs_to_retain: 3
  serial: true
  plan:

  - in_parallel:
    - get: global-ecosystem
    - get: trigger-<%= environment.type %>
      trigger: true
      passed: [trigger-<%= environment.type %>]
    - get: builder

  - task: "[<%= operation.name %>] Node [<%= environment.type %>-<%= node %>]"
    <<: *runner-config
    config:
      platform: linux
      params: 
        # GCP deployment configuration
        SERVICE_ACCOUNT   : ((gcp.<%= environment.gcp.secrets.email %>))
        GCLOUD_CREDENTIALS: ((gcp.<%= environment.gcp.secrets.gcloud_creds %>))
        GCP_PROJECT       : <%= environment.gcp.project %>
        
        # GCP infra project
        SERVICE_INFRA_ACCOUNT   : ((gcp.service-account-email))
        GCLOUD_INFRA_CREDENTIALS: ((gcp.service-account))
        GCP_INFRA_PROJECT       : bitcoin-global-infra

        # Node config
        NODE_NAME     : <%= environment.type %>--<%= node %>-global-node
        NODE_ZONE     : <%= node %>
        NODE_TYPE     : <%= environment.type %>
        NODE_SIZE     : <%= environment.gcp.machine_type %>
        NODE_DISK_SIZE: <%= environment.gcp.hdd_size %>
        NODE_DISK_TYPE: pd-standard

        # Bitcoin config
        BITCOIN_ENTRYPOINT       : <%= environment.command %>
        BITCOIN_UPDATE_ENTRYPOINT: <%= environment.command_update %>
        BITCOIN_NETWORK_TYPE     : <%= environment.type %>
        BITCOIN_PORT             : <%= environment.port %>
        MINER_PORT               : <%= environment.miner_port %>
        MINER_ADDRESS            : <%= environment.miner_address %>
        MINER_ADDITIONAL_CMDS    : <%= environment.miner_commands %>
        BITCOIN_RPC_PORT         : <%= environment.rpc_port %>
        BITCOIN_DATA_DIR         : /bitcoin-global
        BITCOIN_VERSION          : <%= environment.version %>
        BITCOIN_RELEASE          : <%= environment.release %>
        BITCOIN_UPDATE_VERSION   : <%= environment.update_version %>
        BITCOIN_UPDATE_RELEASE   : <%= environment.update_release %>
        BITCOIN_RPC_USERNAME     : admin
        BITCOIN_RPC_PASSWORD     : ((rpc.password))
    
        # Monitoring
        NETDATA_INFRA_ROOM : <%= environment.monitoring.netdata_room %>
        NETDATA_INFRA_TOKEN: ((monitoring.infra-token))
      inputs:
        - name: global-ecosystem
      outputs:
        - name: global-ecosystem
      run:
        user: root
        path: bash
        args:
          - -exc
          - (( join "\n" meta_plan.run-<%= operation.id %> ))
<% end %>

- name: update-<%= environment.type %>-list
  build_logs_to_retain: 3
  serial: true
  plan:
  - in_parallel:
    - get: global-nodes
    - get: trigger-<%= environment.type %>
      trigger: true
      passed:
      <% environment.gcp.node_locations.each do |node| %>
      - <%= environment.type %>--<%= node %>
      <% end %>
    - get: builder

  - task: "[<%= operation.name %>] Update <%= environment.type %> node list"
    <<: *runner-config
    config:
      platform: linux
      inputs:
        - name: global-nodes
      params: 
        # GCP deployment configuration
        SERVICE_ACCOUNT   : ((gcp.<%= environment.gcp.secrets.email %>))
        GCLOUD_CREDENTIALS: ((gcp.<%= environment.gcp.secrets.gcloud_creds %>))
        GCP_PROJECT       : <%= environment.gcp.project %>

        # GCP infra project
        SERVICE_INFRA_ACCOUNT   : ((gcp.service-account-email))
        GCLOUD_INFRA_CREDENTIALS: ((gcp.service-account))
        GCP_INFRA_PROJECT       : bitcoin-global-infra

        BITCOIN_NETWORK_TYPE: <%= environment.type %>
        TRIGGER_OPERATION   : <%= operation.name %>
        TRIGGER_NET         : <%= environment.type %>
        MINER_PORT          : <%= environment.miner_port %>
        SAVE_FILE           : <%= environment.type.upcase %>NET-NODES.md
        NODE_ZONES          : <%= environment.gcp.node_locations.join(',')  %>
        COMMIT_MESSAGE      : "[<%= environment.type %>net] Update node information for <%= operation.name %> action"
      run:
        user: root
        path: bash
        args:
          - -exc
          - (( join "\n" meta_plan.update-list ))
      outputs:
      - name: global-nodes
  - put: global-nodes
    params: {repository: global-nodes}

    <: ((inject slack-notify))

<% end %>

### Group configs
groups:
<% net_config.each do |environment| %>
- name: <%= environment.type %>
  jobs:
  - trigger-<%= environment.type %>
  <% environment.gcp.node_locations.each do |node| %>
  - <%= environment.type %>--<%= node %>
  <% end %>
  - update-<%= environment.type %>-list
<% end %>
