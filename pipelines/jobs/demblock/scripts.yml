---
meta:
  setup_vm: &setup_vm
    - (( grab meta.add_domains ))
    - (( grab meta.servers_ssh ))
    - (( grab meta.wait_for_server ))
    - (( join "\n" meta.setup_server ))

  add_domains: &add_domains |
    global-ecosystem/scripts/dns-record.sh --cf --name="demblock.com" --type="A" \
      --value="${SERVER_IP}" --domain="demblock.com"
    global-ecosystem/scripts/dns-record.sh --cf --name="demblock-tge.com" --type="A" \
      --value="${SERVER_IP}" --domain="demblock-tge.com"
    global-ecosystem/scripts/dns-record.sh --cf --name="demblock-tge.com" --type="A" \
      --value="${SERVER_IP}" --domain="token.demblock-tge.com"

  wait_for_server: &wait_for_server |
    ### Wait until Build VM stable
    echo "Waiting until VM operational..."
    counter=0
    until ssh -t -o StrictHostKeyChecking=no root@${SERVER_IP} 'echo'; do
        counter=$((counter+1))
        if [[ "$counter" -gt 120 ]]; then
            echo "Timed out!"
            exit 1
        fi
        sleep 1
    done
    echo "Success!"

  setup_server: &setup_server
    - ssh -o StrictHostKeyChecking=no root@${SERVER_IP} << EOF
    - (( grab meta.configure_shared ))
    - (( grab meta.install_pkgs ))
    - (( grab meta.configure_git ))
    - (( grab meta.configure_nginx ))
    - exit
    - EOF

  install_pkgs: &install_pkgs |
    ### Download system dependencies
    echo "Prepare machine"
    apt-get update -y
    apt install docker.io nginx git curl software-properties-common python3-pip python-certbot-nginx -y
    curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    ### Create backup dir
    mkdir -p /backup
    
    cd /etc/ssl/certs
    if [ ! -f /etc/ssl/certs/dhparam.pem ]; then
      openssl dhparam -out dhparam.pem 2048
    fi


  configure_nginx: &configure_nginx |
    ### Configure certificates
    if [ ! -f /etc/letsencrypt/live/demblock.com/cert.pem ]; then
      certbot --nginx --agree-tos -n \
        -d demblock.com \
        -m admin@demblock.com
    fi

    if [ ! -f /etc/letsencrypt/live/demblock-tge.com/cert.pem ]; then
      certbot --nginx --agree-tos -n \
        -d demblock-tge.com \
        -m admin@demblock-tge.com
    fi

    if [ ! -f /etc/letsencrypt/live/token.demblock-tge.com/cert.pem ]; then
      certbot --nginx --agree-tos -n \
        -d token.demblock-tge.com \
        -m admin@demblock-tge.com
    fi

    ### Configure nginx
    cat <<'HERE' > /etc/nginx/nginx.conf
    ##################################################
    events {
    }

    http {
      ################### SHARED CONFIGURATION
      error_log /etc/nginx/error_log.log warn;
      client_max_body_size 20m;
      sendfile on;

      ################### SERVICE APIS DEFINITION
      upstream frontend-demblock {
        server localhost:8000;
      }
      upstream backend-demblock {
        server localhost:8001;
      }
      upstream frontend-demblock-tge {
        server localhost:9000;
      }
      upstream backend-demblock-tge {
        server localhost:9001;
      }
      upstream token-demblock {
        server localhost:3000;
      }

      ################### SERVER CONFIGURATIONS
      server {
        server_name backend.demblock.com;

        location / {
            proxy_pass         http://backend-demblock/;
            proxy_set_header   Host \$host;
            proxy_set_header   X-Real-IP \$remote_addr;
            proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host \$server_name;
        }
      }
      
      server {
        server_name demblock.com;
        listen 80;

        return 301 https://demblock.com$request_uri;
      }
      
      server {
        server_name demblock.com;
        listen 443 ssl;

        ssl_certificate /etc/letsencrypt/live/demblock.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/demblock.com/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;

        location / {
          proxy_pass         http://frontend-demblock/;
          proxy_set_header   Host \$host;
          proxy_set_header   X-Real-IP \$remote_addr;
          proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host \$server_name;
        }
      }

      server {
        server_name backend.demblock-tge.com;

        location / {
          proxy_pass         http://backend-demblock-tge/;
          proxy_set_header   Host \$host;
          proxy_set_header   X-Real-IP \$remote_addr;
          proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host \$server_name;
        }
      }

      server {
        server_name demblock-tge.com;
        listen 80;

        return 301 https://demblock-tge.com$request_uri;
      }
      
      server {
        server_name demblock-tge.com;
        listen 443 ssl;

        ssl_certificate /etc/letsencrypt/live/demblock-tge.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/demblock-tge.com/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;

        location / {
          proxy_pass         http://frontend-demblock-tge/;
          proxy_set_header   Host \$host;
          proxy_set_header   X-Real-IP \$remote_addr;
          proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host \$server_name;
        }
      }

      server {
        server_name token.demblock-tge.com;
        listen 80;

        return 301 https://token.demblock-tge.com$request_uri;
      }

      server {
        server_name token.demblock-tge.com;
        listen 443 ssl;

        ssl_certificate /etc/letsencrypt/live/token.demblock-tge.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/token.demblock-tge.com/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;

        location / {
          proxy_pass         http://token-demblock/;
          proxy_set_header   Host \$host;
          proxy_set_header   X-Real-IP \$remote_addr;
          proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host \$server_name;
        }
      }
    }
    ##################################################
    HERE

    ### Restart service
    service nginx restart

  demblock: &demblock
    - ssh -o StrictHostKeyChecking=no root@${SERVER_IP} << EOF
    - |
      ### Initialize repo data
      git clone $DEMBLOCK_REPO /demblock || echo "Already present"
      cd /demblock
      git fetch --all
      git reset --hard origin/master
      
      ### Setup configs
      cat <<CONFIG > .env
      ##################################################
      # mysql config
      MYSQL_DATABASE=demblock
      MYSQL_USER=${MYSQL_USER}
      MYSQL_PASSWORD=${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      # mailer config
      MAILER_HOST=smtp.gmail.com
      MAILER_PORT=587
      MAILER_USERNAME=${MAILER_USER}
      MAILER_PASSWORD=${MAILER_PASSWORD}
      ##################################################
      CONFIG
      
      ### Deploy to docker
      docker-compose build --no-cache
      docker-compose up --force-recreate -d
    - exit
    - EOF

  demblock-tge: &demblock-tge
    - ssh -o StrictHostKeyChecking=no root@${SERVER_IP} << EOF
    - |
      ### Initialize repo data
      git clone $DEMBLOCK_TGE_REPO /demblock-tge || echo "Already present"
      cd /demblock-tge
      git fetch --all
      git reset --hard origin/master
      
      ### Setup configs
      cat <<CONFIG > .env
      ##################################################
      # mysql config
      MYSQL_DATABASE=demblock_tge
      MYSQL_USER=${MYSQL_USER}
      MYSQL_PASSWORD=${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      # mailer config
      MAILER_HOST=smtp.gmail.com
      MAILER_PORT=587
      MAILER_USERNAME=${MAILER_USER}
      MAILER_PASSWORD=${MAILER_PASSWORD}
      ##################################################
      CONFIG
      
      ### Deploy to docker
      docker-compose build --no-cache
      docker-compose up --force-recreate -d
    - exit
    - EOF

  token-demblock-tge: &token-demblock-tge
    - ssh -o StrictHostKeyChecking=no root@${SERVER_IP} << EOF
    - |
      ### Initialize repo data
      git clone $DEMBLOCK_TOKEN_REPO /demblock-token || echo "Already present"
      cd /demblock-token
      git fetch --all
      git reset --hard origin/master

      ### Setup configs
      cat <<CONFIG > .env
      ##################################################
      DB_USER=${MONGODB_USER}
      MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      DB_PASSWORD=${MONGODB_PASSWORD}
      MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      ##################################################
      CONFIG
      
      ### Deploy to docker
      docker-compose build --no-cache
      docker-compose up --force-recreate -d
    - exit
    - EOF
