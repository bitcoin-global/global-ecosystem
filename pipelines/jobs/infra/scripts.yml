---
meta:
  make_nodeinfra: &make_nodeinfra |
    ### Deploy Builder VM on GCP
    global-ecosystem/scripts/add-vm.sh \
      --name="$MACHINE_NAME" \
      --zone="$MACHINE_ZONE" \
      --size="$MACHINE_SIZE" \
      --disk-size="$MACHINE_DISK_SIZE" \
      --disk-type="$MACHINE_DISK_TYPE" \
      --tags="bitcoin-infra" \
      --static-ip

    ### Get IP
    VM_REGION=${MACHINE_ZONE:0:-2}
    ADDRESS_NAME=$MACHINE_NAME-address
    EXTERNAL_IP=$(gcloud compute addresses describe $ADDRESS_NAME --region $VM_REGION --format json | jq '.address' | tr -d '"')
    
    # Add to .io
    global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.io" --type="A" \
      --value="${EXTERNAL_IP}" --domain="bitcoin-global.io"

    ### Create zones
    DOMAINS=dev,io
    for DOMAIN in $(echo ${DOMAINS} | sed "s/,/ /g")
    do
      global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.${DOMAIN}" --type="A" \
        --value="${EXTERNAL_IP}" --domain="vps.bitcoin-global.${DOMAIN}"
      global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.${DOMAIN}" --type="NS" \
        --value="vps.bitcoin-global.${DOMAIN}." --domain="dnsseed.bitcoin-global.${DOMAIN}" --ttl="21600"
      global-ecosystem/scripts/dns-record.sh --cf --name="bitcoin-global.${DOMAIN}" --type="NS" \
        --value="vps.bitcoin-global.${DOMAIN}." --domain="test-dnsseed.bitcoin-global.${DOMAIN}" --ttl="21600"
    done

  wait_for_nodeinfra: &wait_for_nodeinfra |
    ### Wait until Build VM stable
    echo "Waiting until VM operational..."
    counter=0
    until gcloud beta compute ssh --zone $MACHINE_ZONE $MACHINE_NAME --project $GCP_PROJECT --command 'echo'; do
        counter=$((counter+1))
        if [[ "$counter" -gt 120 ]]; then
            echo "Timed out!"
            exit 1
        fi
        sleep 1
    done
    echo "Success!"

  setup_nodeinfra: &setup_nodeinfra
    - gcloud beta compute ssh --zone $MACHINE_ZONE $MACHINE_NAME --project $GCP_PROJECT <<ENDSSH
    - (( grab meta.configure_shared ))
    - (( grab meta.prepare_infra_node ))
    - (( grab meta.configure_git ))
    - (( grab meta.import_gpg ))
    - (( grab meta.deploy_seeders ))
    - exit
    - ENDSSH

  setup_io: &setup_io
    - gcloud beta compute ssh --zone $MACHINE_ZONE $MACHINE_NAME --project $GCP_PROJECT <<ENDSSH
    - (( grab meta.configure_shared ))
    - (( grab meta.configure_git ))
    - (( grab meta.deploy-landing-page ))
    - exit
    - ENDSSH

  prepare_infra_node: &prepare_infra_node |
    ### Download system dependencies
    echo "Prepare machine"
    apt-get update
    apt-get upgrade -y
    apt-get install -y \
      gnupg2 ca-certificates git software-properties-common \
      python3.6 sudo nano ruby make wget curl pigz \
      build-essential autoconf libboost-all-dev libssl-dev

    ### Install monitoring
    echo "Install monitoring"
    if [ ! -f /opt/netdata/usr/bin/netdata-claim.sh ]; then
      bash <(curl -Ss https://my-netdata.io/kickstart-static64.sh) --dont-wait --no-updates --stable-channel --disable-telemetry
    fi
    /opt/netdata/usr/bin/netdata-claim.sh -token=${NETDATA_INFRA_TOKEN} -rooms=${NETDATA_INFRA_ROOM} -url=https://app.netdata.cloud || echo "Already claimed"

    ### Add Google Monitoring
    curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
    bash add-monitoring-agent-repo.sh
    apt-get update -y
    apt-get install -y stackdriver-agent
    service stackdriver-agent start

    ### Add Google Logging
    curl -sSO https://dl.google.com/cloudagents/add-logging-agent-repo.sh
    bash add-logging-agent-repo.sh
    apt-get update -y
    apt-get install -y google-fluentd
    apt-get install -y google-fluentd-catch-all-config-structured
    service google-fluentd start

  deploy_seeders: &deploy_seeders |
    ### Install aditional requirements
    apt-get autoremove -y
    apt-get install -y build-essential libboost-all-dev libssl-dev dnsutils
    apt-get install -y libcurl4-openssl-dev libconfig++-dev
    apt-get install -y node-gyp
    apt-get install -f -y npm
    apt-get install -y python python-setuptools python3-pip python-pip
    python3 -m pip install cffi
    python -m pip install cloudflare
    npm install pm2 --global
  
    ### Install DNS seeder
    MAINNET_IP=\$(dig +short mainnet.bitcoin-global.io)
    TESTNET_IP=\$(dig +short testnet.bitcoin-global.io)
    
    rm -rf /testnet-seeder /mainnet-seeder
    git clone https://github.com/team-exor/generic-seeder /testnet-seeder
    git clone https://github.com/team-exor/generic-seeder /mainnet-seeder
    cd /testnet-seeder && make
    cd /mainnet-seeder && make

    ### ============ TEST DNSSEEDER
    cat <<SRVCCFG > /testnet-seeder/settings.conf
    protocol_version="70016"
    init_proto_version="209"
    min_peer_proto_version="70015"
    caddr_time_version="31402"
    pchMessageStart_0 = "0x50"
    pchMessageStart_1 = "0xc9"
    pchMessageStart_2 = "0x6a"
    pchMessageStart_3 = "0x24"
    wallet_port="18222"
    explorer_url=""
    second_explorer_url=""
    explorer_requery_seconds="60"
    block_count="1780319"
    seed_1="\$TESTNET_IP"
    seed_2=""
    seed_3=""
    seed_4=""
    seed_5=""
    seed_6=""
    seed_7=""
    seed_8=""
    seed_9=""
    seed_10=""
    cf_domain="bitcoin-global.co"
    cf_domain_prefix="test-dnsseed"
    cf_username="${CLOUDFLARE_EMAIL}"
    cf_api_key="${CLOUDFLARE_API_TOKEN}"
    cf_seed_dump="dnsseed.dump"
    SRVCCFG

    ### ============ MAIN DNSSEEDER
    cat <<SRVCCFG > /mainnet-seeder/settings.conf
    protocol_version="70016"
    init_proto_version="209"
    min_peer_proto_version="70015"
    caddr_time_version="31402"
    pchMessageStart_0 = "0x3b"
    pchMessageStart_1 = "0xf8"
    pchMessageStart_2 = "0xac"
    pchMessageStart_3 = "0x8f"
    wallet_port="8222"
    explorer_url=""
    second_explorer_url=""
    explorer_requery_seconds="60"
    block_count="638593"
    seed_1="\$MAINNET_IP"
    seed_2=""
    seed_3=""
    seed_4=""
    seed_5=""
    seed_6=""
    seed_7=""
    seed_8=""
    seed_9=""
    seed_10=""
    cf_domain="bitcoin-global.co"
    cf_domain_prefix="dnsseed"
    cf_username="${CLOUDFLARE_EMAIL}"
    cf_api_key="${CLOUDFLARE_API_TOKEN}"
    cf_seed_dump="dnsseed.dump"
    SRVCCFG

    ### ==============================
    pm2 startup
    pm2 start /testnet-seeder/dnsseed --name "testnet-seeder" || echo "Already on the list"
    pm2 start /mainnet-seeder/dnsseed --name "mainnet-seeder" || echo "Already on the list"
    pm2 save

    crontab -u root -l | grep -v '/testnet-seeder'  | crontab -u root - || echo "Empty"
    crontab -u root -l | grep -v '/mainnet-seeder'  | crontab -u root - || echo "Empty"
    (crontab -l 2>/dev/null; echo "*/10 * * * * cd /testnet-seeder/cf-uploader && python seeder.py") | crontab -
    (crontab -l 2>/dev/null; echo "*/10 * * * * cd /mainnet-seeder/cf-uploader && python seeder.py") | crontab -

  import_gpg: &import_gpg |
    ### Import and unlock GPG key
    echo "TEMP" > ~/temp.txt
    mkdir -p ~/.gpg
    echo "${RELEASE_CERT}" > ~/.gpg/cert.pem
    echo "${RELEASE_KEY}" > ~/.gpg/cert_key.pem
    echo "${GPG_PUBLIC}" | base64 -d > ~/.gpg/public.key
    echo "${GPG_PRIVATE}" | base64 -d > ~/.gpg/private.key
    echo "${GPG_SUBKEY}" | base64 -d > ~/.gpg/sub.key
    gpg --import ~/.gpg/public.key
    gpg --import ~/.gpg/private.key
    gpg --import ~/.gpg/sub.key
    rm -rf ~/temp*

  deploy-landing-page: &deploy-landing-page |
    ### Install requirements
    apt update -y && apt upgrade -y
    apt install -y git software-properties-common nginx gcc g++ make python3-pip psmisc
    # add-apt-repository --remove ppa:certbot/certbot -y && add-apt-repository ppa:certbot/certbot -y
    apt update -y && apt upgrade -y
    apt install -y python-certbot-nginx
    python3 -m pip install certbot-nginx
    python3 -m pip install cffi

    ### Prepare
    cd /var/www/
    rm -rf ./bitcoin-global.io
    git clone https://github.com/bitcoin-global/bitcoin-global.io.git ./bitcoin-global.io

    ### Get certificates
    if [ ! -f /etc/letsencrypt/live/bitcoin-global.io/cert.pem ]; then
      certbot --nginx --agree-tos -n \
        -d bitcoin-global.io \
        -m admin@bitcoin-global.io
    fi
    
    ### Add configuration files
    cp ./bitcoin-global.io/nginx.conf /etc/nginx/sites-available/bitcoin-global.io.conf

    cd /etc/ssl/certs
    if [ ! -f /etc/ssl/certs/dhparam.pem ]; then
      openssl dhparam -out dhparam.pem 2048
    fi

    ### Activate service
    ln -s /etc/nginx/sites-available/bitcoin-global.io.conf /etc/nginx/sites-enabled/ || echo "Already present"
    rm -rf /etc/nginx/sites-enabled/default
    rm -rf /etc/nginx/sites-available/default
    fuser -k 80/tcp  || echo "skipping"
    fuser -k 443/tcp || echo "skipping"

    service nginx restart


  check_ibd: &check_ibd |
    # Clone repo
    git clone https://github.com/bitcoin-global/global-nodes.git ./nodes
    cd ./nodes
    apk update && apk add bind-tools

    echo -e "## **Mainnet** IBD status\n\n" > IBD-STATUS.md
    echo "Node | Block" >> IBD-STATUS.md
    echo "--- | ---" >> IBD-STATUS.md
    declare -a locations=("asia" "australia" "europe" "us")
    for location in "${locations[@]}"
    do
      SERVER_IP=$(dig +short explorer.$location.mainnet.bitcoin-global.io)
      result=$(ssh -o StrictHostKeyChecking=no root@${SERVER_IP} \
          "sudo /binaries/bin/bitglob-cli -conf=/binaries/.bitglobal/bitglob.conf getblockchaininfo | jq -r .blocks" || echo '0')
      printf "\`%s\` | %s\n" $location $result >> IBD-STATUS.md
    done

    ### Get timestamp
    timestamp=$(date '+%d/%m/%Y %H:%M:%S')
    echo -e "\n\n**Note**" >> IBD-STATUS.md
    echo -e "* Block **0** mean RPC is not working. Check server status." >> IBD-STATUS.md
    echo -e "* Block **638591** means node is fully synchronized.\n" >> IBD-STATUS.md
    echo -e "\nLast update: \`$timestamp\`" >> IBD-STATUS.md
    
    # Push
    git fetch && git pull
    git add ./IBD-STATUS.md
    git diff-index --quiet HEAD || git commit -m "ci: Update IBD status"
    git push -f
